{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"D:\\\\react\\\\project\\\\myproject\\\\src\\\\components\\\\BottomTabNavigator\\\\index.js\";\n\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\n\nvar BottomTabNavigator = function BottomTabNavigator(_ref) {\n  var state = _ref.state,\n      descriptors = _ref.descriptors,\n      navigation = _ref.navigation;\n  var focusedOptions = descriptors[state.routes[state.index].key].options;\n\n  if (focusedOptions.tabBarVisible === false) {\n    return null;\n  }\n\n  return React.createElement(View, {\n    style: {\n      flexDirection: 'row'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 5\n    }\n  }, state.routes.map(function (route, index) {\n    var options = descriptors[route.key].options;\n    var label = options.tabBarLabel !== undefined ? options.tabBarLabel : options.title !== undefined ? options.title : route.name;\n    var isFocused = state.index === index;\n\n    var onPress = function onPress() {\n      var event = navigation.emit({\n        type: 'tabPress',\n        target: route.key,\n        canPreventDefault: true\n      });\n\n      if (!isFocused && !event.defaultPrevented) {\n        navigation.navigate(route.name);\n      }\n    };\n\n    var onLongPress = function onLongPress() {\n      navigation.emit({\n        type: 'tabLongPress',\n        target: route.key\n      });\n    };\n\n    return React.createElement(TouchableOpacity, {\n      accessibilityRole: \"button\",\n      accessibilityState: isFocused ? {\n        selected: true\n      } : {},\n      accessibilityLabel: options.tabBarAccessibilityLabel,\n      testID: options.tabBarTestID,\n      onPress: onPress,\n      onLongPress: onLongPress,\n      style: {\n        flex: 1\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }\n    }, React.createElement(Text, {\n      style: {\n        color: isFocused ? '#673ab7' : '#222'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 13\n      }\n    }, label));\n  }));\n};\n\nexport default BottomTabNavigator;\nvar styles = StyleSheet.create({\n  container: {\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    paddingHorizontal: 20,\n    paddingVertical: 15\n  }\n});","map":{"version":3,"sources":["D:/react/project/myproject/src/components/BottomTabNavigator/index.js"],"names":["React","BottomTabNavigator","state","descriptors","navigation","focusedOptions","routes","index","key","options","tabBarVisible","flexDirection","map","route","label","tabBarLabel","undefined","title","name","isFocused","onPress","event","emit","type","target","canPreventDefault","defaultPrevented","navigate","onLongPress","selected","tabBarAccessibilityLabel","tabBarTestID","flex","color","styles","StyleSheet","create","container","display","justifyContent","paddingHorizontal","paddingVertical"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { StyleSheet, Text, View , TouchableOpacity } from 'react-native'\r\n\r\nconst BottomTabNavigator = ({ state, descriptors, navigation }) => {\r\n    const focusedOptions = descriptors[state.routes[state.index].key].options;\r\n\r\n  if (focusedOptions.tabBarVisible === false) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <View style={{ flexDirection: 'row' }}>\r\n      {state.routes.map((route, index) => {\r\n        const { options } = descriptors[route.key];\r\n        const label =\r\n          options.tabBarLabel !== undefined\r\n            ? options.tabBarLabel\r\n            : options.title !== undefined\r\n            ? options.title\r\n            : route.name;\r\n\r\n        const isFocused = state.index === index;\r\n\r\n        const onPress = () => {\r\n          const event = navigation.emit({\r\n            type: 'tabPress',\r\n            target: route.key,\r\n            canPreventDefault: true,\r\n          });\r\n\r\n          if (!isFocused && !event.defaultPrevented) {\r\n            navigation.navigate(route.name);\r\n          }\r\n        };\r\n\r\n        const onLongPress = () => {\r\n          navigation.emit({\r\n            type: 'tabLongPress',\r\n            target: route.key,\r\n          });\r\n        };\r\n\r\n        return (\r\n          <TouchableOpacity\r\n            accessibilityRole=\"button\"\r\n            accessibilityState={isFocused ? { selected: true } : {}}\r\n            accessibilityLabel={options.tabBarAccessibilityLabel}\r\n            testID={options.tabBarTestID}\r\n            onPress={onPress}\r\n            onLongPress={onLongPress}\r\n            style={{ flex: 1 }}\r\n          >\r\n            <Text style={{ color: isFocused ? '#673ab7' : '#222' }}>\r\n              {label}\r\n            </Text>\r\n          </TouchableOpacity>\r\n        );\r\n      })}\r\n    </View>\r\n  );\r\n\r\n}\r\n\r\nexport default BottomTabNavigator\r\n\r\nconst styles = StyleSheet.create({\r\n  container : {\r\n    display : 'flex' ,\r\n    flexDirection : 'row' ,\r\n    justifyContent : 'space-between' ,\r\n    paddingHorizontal : 20 ,\r\n    paddingVertical : 15\r\n  }\r\n})\r\n"]},"metadata":{},"sourceType":"module"}